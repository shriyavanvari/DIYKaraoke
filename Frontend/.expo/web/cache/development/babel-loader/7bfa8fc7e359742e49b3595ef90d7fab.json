{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\noopu\\\\OneDrive\\\\Documents\\\\DIYKaraoke\\\\Frontend\\\\app\\\\screens\\\\RecognizeSong.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { Audio } from \"expo-av\";\n\nfunction RecognizeSong(props) {\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      recording = _React$useState2[0],\n      setRecording = _React$useState2[1];\n\n  function startRecording() {\n    var _recording;\n\n    return _regeneratorRuntime.async(function startRecording$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            console.log(\"Requesting permissions..\");\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(Audio.requestPermissionsAsync());\n\n          case 4:\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(Audio.setAudioModeAsync({\n              allowsRecordingIOS: true,\n              playsInSilentModeIOS: true\n            }));\n\n          case 6:\n            console.log(\"Starting recording..\");\n            _recording = new Audio.Recording();\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(_recording.prepareToRecordAsync(Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY));\n\n          case 10:\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(_recording.startAsync());\n\n          case 12:\n            setRecording(_recording);\n            console.log(\"Recording started\");\n            _context.next = 19;\n            break;\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(\"Failed to start recording\", _context.t0);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 16]], Promise);\n  }\n\n  function stopRecording() {\n    var uri;\n    return _regeneratorRuntime.async(function stopRecording$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(\"Stopping recording..\");\n            setRecording(undefined);\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(recording.stopAndUnloadAsync());\n\n          case 4:\n            uri = recording.getURI();\n            console.log(\"Recording stopped and stored at\", uri);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return React.createElement(SafeAreaView, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, React.createElement(Image, {\n    style: styles.logo,\n    source: require(\"../assets/karaoke.png\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    title: recording ? \"Stop Recording\" : \"Start Recording\",\n    onPress: recording ? stopRecording : startRecording,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\"\n  },\n  image: {\n    width: 120,\n    height: 150,\n    opacity: 0.3\n  },\n  scrollContentContainer: {},\n  box: {\n    height: 120,\n    width: 120,\n    borderRadius: 5,\n    marginVertical: 5,\n    backgroundColor: \"#61dafb\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  text: {\n    fontSize: 14,\n    fontWeight: \"bold\",\n    margin: 8,\n    color: \"#000\",\n    textAlign: \"center\"\n  },\n  logo: {\n    width: 120,\n    height: 120,\n    marginTop: 40,\n    marginBottom: 10\n  }\n});\nexport default RecognizeSong;","map":{"version":3,"sources":["C:/Users/noopu/OneDrive/Documents/DIYKaraoke/Frontend/app/screens/RecognizeSong.js"],"names":["React","Audio","RecognizeSong","props","useState","recording","setRecording","startRecording","console","log","requestPermissionsAsync","setAudioModeAsync","allowsRecordingIOS","playsInSilentModeIOS","Recording","prepareToRecordAsync","RECORDING_OPTIONS_PRESET_HIGH_QUALITY","startAsync","error","stopRecording","undefined","stopAndUnloadAsync","uri","getURI","styles","container","logo","require","StyleSheet","create","flex","alignItems","image","width","height","opacity","scrollContentContainer","box","borderRadius","marginVertical","backgroundColor","justifyContent","text","fontSize","fontWeight","margin","color","textAlign","marginTop","marginBottom"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  SafeAreaView,\r\n  StyleSheet,\r\n  View,\r\n  Image,\r\n  TouchableOpacity,\r\n  Text,\r\n  Button,\r\n} from \"react-native\";\r\nimport { Audio } from \"expo-av\";\r\n\r\nfunction RecognizeSong(props) {\r\n  const [recording, setRecording] = React.useState();\r\n\r\n  async function startRecording() {\r\n    try {\r\n      console.log(\"Requesting permissions..\");\r\n      await Audio.requestPermissionsAsync();\r\n      await Audio.setAudioModeAsync({\r\n        allowsRecordingIOS: true,\r\n        playsInSilentModeIOS: true,\r\n      });\r\n      console.log(\"Starting recording..\");\r\n      const recording = new Audio.Recording();\r\n      await recording.prepareToRecordAsync(\r\n        Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY\r\n      );\r\n      await recording.startAsync();\r\n      setRecording(recording);\r\n      console.log(\"Recording started\");\r\n    } catch (err) {\r\n      console.error(\"Failed to start recording\", err);\r\n    }\r\n  }\r\n\r\n  async function stopRecording() {\r\n    console.log(\"Stopping recording..\");\r\n    setRecording(undefined);\r\n    await recording.stopAndUnloadAsync();\r\n    const uri = recording.getURI();\r\n    console.log(\"Recording stopped and stored at\", uri);\r\n  }\r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <Image style={styles.logo} source={require(\"../assets/karaoke.png\")} />\r\n      <Button\r\n        title={recording ? \"Stop Recording\" : \"Start Recording\"}\r\n        onPress={recording ? stopRecording : startRecording}\r\n      />\r\n    </SafeAreaView>\r\n  );\r\n}\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n  },\r\n  image: {\r\n    width: 120,\r\n    height: 150,\r\n    opacity: 0.3,\r\n  },\r\n  scrollContentContainer: {\r\n    //   flex:1,\r\n    //   alignItems:\"center\"\r\n    //   // paddingTop:15,\r\n    //   // // paddingBottom: 60\r\n  },\r\n  box: {\r\n    height: 120,\r\n    width: 120,\r\n    borderRadius: 5,\r\n    marginVertical: 5,\r\n    backgroundColor: \"#61dafb\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  text: {\r\n    fontSize: 14,\r\n    fontWeight: \"bold\",\r\n    margin: 8,\r\n    color: \"#000\",\r\n    textAlign: \"center\",\r\n  },\r\n  logo: {\r\n    width: 120,\r\n    height: 120,\r\n    marginTop: 40,\r\n    marginBottom: 10,\r\n  },\r\n});\r\n\r\nexport default RecognizeSong;\r\n"]},"metadata":{},"sourceType":"module"}